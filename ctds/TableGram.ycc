/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Substitute the type names.  */
#define YYSTYPE         TABLEGRAMSTYPE
/* Substitute the variable and function names.  */
#define yyparse         TableGramparse
#define yylex           TableGramlex
#define yyerror         TableGramerror
#define yydebug         TableGramdebug
#define yynerrs         TableGramnerrs


/* Copy the first part of user declarations.  */
#line 29 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:339  */

using namespace casacore;

#line 77 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "TableGram.yhh".  */
#ifndef YY_TABLEGRAM_HOME_ZUUL06_2_DSCHIEB_CASA_DEDICATED_TABLE_SYS_CASACORE_BUILD_TABLES_TABLEGRAM_YHH_INCLUDED
# define YY_TABLEGRAM_HOME_ZUUL06_2_DSCHIEB_CASA_DEDICATED_TABLE_SYS_CASACORE_BUILD_TABLES_TABLEGRAM_YHH_INCLUDED
/* Debug traces.  */
#ifndef TABLEGRAMDEBUG
# if defined YYDEBUG
#if YYDEBUG
#   define TABLEGRAMDEBUG 1
#  else
#   define TABLEGRAMDEBUG 0
#  endif
# else /* ! defined YYDEBUG */
#  define TABLEGRAMDEBUG 0
# endif /* ! defined YYDEBUG */
#endif  /* ! defined TABLEGRAMDEBUG */
#if TABLEGRAMDEBUG
extern int TableGramdebug;
#endif

/* Token type.  */
#ifndef TABLEGRAMTOKENTYPE
# define TABLEGRAMTOKENTYPE
  enum TableGramtokentype
  {
    STYLE = 258,
    TIMING = 259,
    SHOW = 260,
    SELECT = 261,
    UPDATE = 262,
    UPDSET = 263,
    INSERT = 264,
    VALUES = 265,
    DELETE = 266,
    COUNT = 267,
    COUNTALL = 268,
    CALC = 269,
    CREATETAB = 270,
    ALTERTAB = 271,
    DROPTAB = 272,
    WITH = 273,
    FROM = 274,
    JOIN = 275,
    ON = 276,
    WHERE = 277,
    GROUPBY = 278,
    GROUPROLL = 279,
    HAVING = 280,
    ORDERBY = 281,
    NODUPL = 282,
    GIVING = 283,
    INTO = 284,
    SUBTABLES = 285,
    EXCEPT = 286,
    SORTASC = 287,
    SORTDESC = 288,
    LIMIT = 289,
    OFFSET = 290,
    ADDCOL = 291,
    COPYCOL = 292,
    RENAMECOL = 293,
    DROPCOL = 294,
    SETKEY = 295,
    COPYKEY = 296,
    RENAMEKEY = 297,
    DROPKEY = 298,
    ADDROW = 299,
    DMINFO = 300,
    ALL = 301,
    NAME = 302,
    UDFLIBSYN = 303,
    FLDNAME = 304,
    TABNAME = 305,
    LITERAL = 306,
    STRINGLITERAL = 307,
    REGEX = 308,
    AS = 309,
    TO = 310,
    IN = 311,
    INCONE = 312,
    BETWEEN = 313,
    AROUND = 314,
    EXISTS = 315,
    LIKE = 316,
    ILIKE = 317,
    LPAREN = 318,
    RPAREN = 319,
    COMMA = 320,
    LBRACKET = 321,
    RBRACKET = 322,
    LBRACE = 323,
    RBRACE = 324,
    COLON = 325,
    SEMICOL = 326,
    MIDWIDTH = 327,
    OPENOPEN = 328,
    OPENCLOSED = 329,
    CLOSEDOPEN = 330,
    CLOSEDCLOSED = 331,
    OPENEMPTY = 332,
    EMPTYOPEN = 333,
    CLOSEDEMPTY = 334,
    EMPTYCLOSED = 335,
    OR = 336,
    AND = 337,
    EQ = 338,
    EQASS = 339,
    GT = 340,
    GE = 341,
    LT = 342,
    LE = 343,
    NE = 344,
    EQNEAR = 345,
    NENEAR = 346,
    BITOR = 347,
    BITXOR = 348,
    BITAND = 349,
    PLUS = 350,
    MINUS = 351,
    TIMES = 352,
    DIVIDE = 353,
    DIVIDETRUNC = 354,
    MODULO = 355,
    UNARY = 356,
    BITNOT = 357,
    NOT = 358,
    POWER = 359
  };
#endif
/* Tokens.  */
#define STYLE 258
#define TIMING 259
#define SHOW 260
#define SELECT 261
#define UPDATE 262
#define UPDSET 263
#define INSERT 264
#define VALUES 265
#define DELETE 266
#define COUNT 267
#define COUNTALL 268
#define CALC 269
#define CREATETAB 270
#define ALTERTAB 271
#define DROPTAB 272
#define WITH 273
#define FROM 274
#define JOIN 275
#define ON 276
#define WHERE 277
#define GROUPBY 278
#define GROUPROLL 279
#define HAVING 280
#define ORDERBY 281
#define NODUPL 282
#define GIVING 283
#define INTO 284
#define SUBTABLES 285
#define EXCEPT 286
#define SORTASC 287
#define SORTDESC 288
#define LIMIT 289
#define OFFSET 290
#define ADDCOL 291
#define COPYCOL 292
#define RENAMECOL 293
#define DROPCOL 294
#define SETKEY 295
#define COPYKEY 296
#define RENAMEKEY 297
#define DROPKEY 298
#define ADDROW 299
#define DMINFO 300
#define ALL 301
#define NAME 302
#define UDFLIBSYN 303
#define FLDNAME 304
#define TABNAME 305
#define LITERAL 306
#define STRINGLITERAL 307
#define REGEX 308
#define AS 309
#define TO 310
#define IN 311
#define INCONE 312
#define BETWEEN 313
#define AROUND 314
#define EXISTS 315
#define LIKE 316
#define ILIKE 317
#define LPAREN 318
#define RPAREN 319
#define COMMA 320
#define LBRACKET 321
#define RBRACKET 322
#define LBRACE 323
#define RBRACE 324
#define COLON 325
#define SEMICOL 326
#define MIDWIDTH 327
#define OPENOPEN 328
#define OPENCLOSED 329
#define CLOSEDOPEN 330
#define CLOSEDCLOSED 331
#define OPENEMPTY 332
#define EMPTYOPEN 333
#define CLOSEDEMPTY 334
#define EMPTYCLOSED 335
#define OR 336
#define AND 337
#define EQ 338
#define EQASS 339
#define GT 340
#define GE 341
#define LT 342
#define LE 343
#define NE 344
#define EQNEAR 345
#define NENEAR 346
#define BITOR 347
#define BITXOR 348
#define BITAND 349
#define PLUS 350
#define MINUS 351
#define TIMES 352
#define DIVIDE 353
#define DIVIDETRUNC 354
#define MODULO 355
#define UNARY 356
#define BITNOT 357
#define NOT 358
#define POWER 359

/* Value type.  */
#if ! defined TABLEGRAMSTYPE && ! defined TABLEGRAMSTYPE_IS_DECLARED

union TABLEGRAMSTYPE
{
#line 251 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:355  */

TaQLConstNode* val;
TaQLRegexNode* valre;
TaQLNode* node;
TaQLConstNode* nodename;
TaQLMultiNode* nodelist;
TaQLQueryNode* nodeselect;
TaQLRecFldNodeRep* noderecfldrep;

#line 343 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:355  */
};

typedef union TABLEGRAMSTYPE TABLEGRAMSTYPE;
# define TABLEGRAMSTYPE_IS_TRIVIAL 1
# define TABLEGRAMSTYPE_IS_DECLARED 1
#endif



int TableGramparse (void);

#endif /* !YY_TABLEGRAM_HOME_ZUUL06_2_DSCHIEB_CASA_DEDICATED_TABLE_SYS_CASACORE_BUILD_TABLES_TABLEGRAM_YHH_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 261 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:358  */

int TableGramlex (YYSTYPE*);
/* Define the functions in TableGram.ll
   to set EXPRstate or TABLENAMEstate from bison */
void setEXPRstate();
void setTABLENAMEstate();

#line 366 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined TABLEGRAMSTYPE_IS_TRIVIAL && TABLEGRAMSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  46
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1669

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  105
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  116
/* YYNRULES -- Number of rules.  */
#define YYNRULES  358
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  685

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   359

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104
};

#if TABLEGRAMDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   279,   279,   280,   284,   285,   288,   290,   291,   293,
     295,   300,   301,   304,   308,   310,   312,   314,   319,   321,
     323,   325,   327,   329,   331,   333,   338,   344,   348,   355,
     359,   368,   370,   372,   378,   381,   385,   392,   396,   403,
     407,   415,   421,   427,   433,   442,   445,   450,   457,   465,
     473,   481,   485,   494,   499,   505,   511,   517,   526,   533,
     539,   544,   549,   559,   563,   566,   571,   579,   583,   592,
     595,   600,   604,   613,   621,   629,   635,   646,   651,   656,
     662,   671,   679,   683,   692,   697,   702,   707,   712,   717,
     722,   727,   732,   740,   745,   755,   760,   770,   774,   782,
     787,   797,   801,   809,   813,   819,   828,   832,   840,   848,
     851,   857,   860,   866,   873,   877,   883,   887,   896,   900,
     905,   913,   917,   927,   931,   936,   941,   946,   951,   956,
     961,   966,   978,   982,   987,   992,   997,  1002,  1010,  1015,
    1020,  1028,  1035,  1041,  1044,  1048,  1051,  1059,  1065,  1069,
    1075,  1080,  1092,  1097,  1102,  1108,  1114,  1120,  1129,  1134,
    1145,  1150,  1156,  1160,  1168,  1172,  1178,  1182,  1188,  1193,
    1203,  1209,  1217,  1223,  1229,  1237,  1243,  1249,  1257,  1266,
    1270,  1275,  1283,  1287,  1291,  1296,  1305,  1309,  1315,  1321,
    1328,  1343,  1349,  1354,  1360,  1365,  1373,  1376,  1389,  1393,
    1396,  1404,  1408,  1414,  1420,  1428,  1431,  1434,  1438,  1444,
    1448,  1452,  1459,  1463,  1469,  1473,  1478,  1482,  1490,  1497,
    1501,  1507,  1510,  1518,  1521,  1529,  1532,  1537,  1542,  1547,
    1552,  1557,  1562,  1567,  1575,  1585,  1589,  1597,  1611,  1619,
    1633,  1639,  1645,  1650,  1657,  1662,  1668,  1675,  1683,  1690,
    1698,  1706,  1718,  1721,  1726,  1731,  1736,  1741,  1746,  1751,
    1756,  1761,  1766,  1771,  1773,  1778,  1783,  1794,  1796,  1807,
    1810,  1821,  1823,  1828,  1833,  1838,  1843,  1846,  1852,  1855,
    1861,  1864,  1870,  1873,  1880,  1884,  1888,  1894,  1898,  1905,
    1909,  1918,  1921,  1927,  1940,  1943,  1948,  1953,  1958,  1963,
    1968,  1973,  1978,  1983,  1988,  1993,  1998,  2003,  2008,  2013,
    2018,  2023,  2028,  2033,  2038,  2043,  2048,  2053,  2064,  2068,
    2072,  2079,  2086,  2096,  2101,  2107,  2112,  2121,  2124,  2129,
    2134,  2143,  2146,  2151,  2156,  2165,  2170,  2175,  2180,  2185,
    2190,  2195,  2203,  2207,  2215,  2220,  2225,  2233,  2238,  2245,
    2253,  2256,  2265,  2268,  2274,  2283,  2288,  2297,  2301
};
#endif

#if TABLEGRAMDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "STYLE", "TIMING", "SHOW", "SELECT",
  "UPDATE", "UPDSET", "INSERT", "VALUES", "DELETE", "COUNT", "COUNTALL",
  "CALC", "CREATETAB", "ALTERTAB", "DROPTAB", "WITH", "FROM", "JOIN", "ON",
  "WHERE", "GROUPBY", "GROUPROLL", "HAVING", "ORDERBY", "NODUPL", "GIVING",
  "INTO", "SUBTABLES", "EXCEPT", "SORTASC", "SORTDESC", "LIMIT", "OFFSET",
  "ADDCOL", "COPYCOL", "RENAMECOL", "DROPCOL", "SETKEY", "COPYKEY",
  "RENAMEKEY", "DROPKEY", "ADDROW", "DMINFO", "ALL", "NAME", "UDFLIBSYN",
  "FLDNAME", "TABNAME", "LITERAL", "STRINGLITERAL", "REGEX", "AS", "TO",
  "IN", "INCONE", "BETWEEN", "AROUND", "EXISTS", "LIKE", "ILIKE", "LPAREN",
  "RPAREN", "COMMA", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "COLON",
  "SEMICOL", "MIDWIDTH", "OPENOPEN", "OPENCLOSED", "CLOSEDOPEN",
  "CLOSEDCLOSED", "OPENEMPTY", "EMPTYOPEN", "CLOSEDEMPTY", "EMPTYCLOSED",
  "OR", "AND", "EQ", "EQASS", "GT", "GE", "LT", "LE", "NE", "EQNEAR",
  "NENEAR", "BITOR", "BITXOR", "BITAND", "PLUS", "MINUS", "TIMES",
  "DIVIDE", "DIVIDETRUNC", "MODULO", "UNARY", "BITNOT", "NOT", "POWER",
  "$accept", "topcomm", "topcomm1", "sttimcoms", "stylecoms", "stylecomm",
  "stylelist", "command", "showcomm", "showlist", "showflds", "nestedcomm",
  "tfcommand", "subquery", "withpart", "selcomm", "selcol", "normcol",
  "countcomm", "updcomm", "updlist", "updexpr", "inscomm", "insclist",
  "insvalue", "insparts", "inspart", "insvlist", "delcomm", "dropcomm",
  "calccomm", "cretabcomm", "alttabcomm", "altlist", "altcomm", "copycols",
  "rencols", "namelist", "renkeys", "dropkeys", "setkeys", "setkey",
  "copykeys", "copykey", "keyval", "brackval", "dminfo", "exprlist",
  "groupby", "having", "order", "limitoff", "tabnmtyp", "tabnmopts",
  "givenlb", "given", "into", "columns", "collist", "colexpr", "wildcol",
  "nmcolumns", "nrowspec", "colspecs", "colspecl", "colspec", "likedrop",
  "likedropac", "fromtabs", "tables", "tablist", "tabalias", "tfnamen",
  "tfname", "concsub", "concslist", "concgiven", "concinto", "stabname",
  "tabname", "joins", "joinlist", "join", "whexpr", "orexpr", "andexpr",
  "relexpr", "arithexpr", "simexpr", "inxexpr", "simbexpr", "namefld",
  "unit", "literal", "set", "elemlist", "elems", "elem", "singlerange",
  "range", "subscripts", "subsingle", "subsrange", "colonrangeinterval",
  "colonrangeindex", "colonrange", "sortlist", "sortexpr", "dmlist",
  "dmelem", "recexpr", "recfield", "srecfield", "srecval", "rrecfield",
  "asdtype", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359
};
# endif

#define YYPACT_NINF -387

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-387)))

#define YYTABLE_NINF -198

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     231,   108,    67,   271,   345,    65,    96,   261,   330,  -387,
    -387,  -387,  -387,  1270,  -387,  -387,  -387,  -387,  -387,  -387,
    -387,  -387,  -387,  -387,  -387,    44,    67,  -387,  -387,  -387,
    -387,  -387,   271,  -387,  -387,    51,   164,   221,  -387,  -387,
    -387,   144,  -387,   167,   244,  -387,  -387,  -387,  -387,    67,
    -387,   303,   345,   208,   277,   426,   746,   462,   345,   345,
     380,  -387,   419,   228,   274,   236,   245,   250,   294,   345,
    -387,   306,    67,   266,  -387,   426,   426,  -387,  -387,  -387,
    -387,  -387,   160,   447,   447,  1116,  1116,  -387,  1116,   895,
    -387,   243,  -387,  -387,   292,  -387,  -387,     6,   291,  -387,
    1311,   259,   322,  -387,   333,  -387,  -387,   401,   345,   936,
     345,   397,   345,     3,   124,   222,   370,   414,  -387,  -387,
    -387,  -387,  -387,  -387,  -387,  -387,  -387,  -387,   389,   339,
    -387,  -387,   561,  -387,  -387,   164,   164,  -387,  1116,  1116,
     954,   489,  1116,  1116,   963,   436,    89,  1164,   398,  -387,
    -387,  -387,  -387,   386,   196,  1116,   391,   391,   391,   160,
     391,   345,   936,   462,   282,   480,   426,    12,   936,   936,
    -387,   602,  1116,  1116,  1116,  1116,  1116,  1116,  1116,  1116,
    1116,  1116,  1116,  1116,  1116,  1116,  1116,  1116,  1116,  1116,
    1116,  1116,  1116,  1116,  1116,  1171,  1116,  -387,  -387,  -387,
     671,   561,   128,    36,    -3,   465,   345,   470,   345,   465,
    -387,   446,  -387,  -387,   139,   345,    14,  -387,   463,   276,
     124,  1625,  -387,   435,  -387,  -387,   271,   441,   456,   459,
    1493,  1110,  1116,  1077,  1116,  1443,  1544,  1544,  1116,  1347,
    -387,  1021,  1116,  1116,  1116,  1116,  1116,  -387,  -387,  -387,
     561,  -387,  -387,   506,   386,  -387,   345,   480,   936,   936,
     508,  -387,   488,   490,   291,  -387,  1430,  -387,  -387,  1544,
    1512,  1282,  1544,  1544,  1544,  1544,  1544,  1544,  1544,  1544,
    1544,  1544,  1544,  1556,  1009,   647,   280,   280,   391,   391,
     391,   391,   602,  1116,  1116,  1116,  1116,  1116,   391,  1030,
     386,  1213,   273,  -387,  -387,  -387,   475,    37,   501,     2,
    -387,   128,   166,   166,    62,   345,   525,   465,   936,  -387,
     525,   469,   320,  -387,  -387,  -387,   156,    22,   312,   936,
     511,   517,   517,   511,   511,  -387,   511,   519,   521,   524,
      22,    22,    22,    22,   936,  1625,  -387,   528,  -387,  -387,
    -387,  1116,  1116,   821,   767,  1544,  1116,  1363,   808,  1116,
    1461,  1544,  1544,  1544,  1544,  1544,  -387,   345,   465,   506,
    -387,   506,   508,   502,   386,   502,   936,   525,  -387,   507,
    1116,  1116,  1430,  -387,  1544,  1531,  1327,  1544,  1544,  1474,
    -387,  -387,  1089,  1030,  -387,  -387,   671,   936,   512,   128,
     465,   515,  -387,   529,   454,   337,   295,  -387,   547,   299,
     661,   510,  -387,   386,   510,  1098,   446,  -387,   498,   446,
    -387,   159,  -387,   524,   386,  -387,   522,  -387,  -387,   523,
     518,   526,   101,   505,   109,   531,   530,  -387,   538,   542,
    -387,   527,   551,  -387,   533,   553,   535,   557,  -387,   386,
    -387,  -387,  1544,  1544,  -387,  -387,  -387,  -387,  1380,  1544,
    -387,  -387,  -387,  -387,  1397,  1544,  1116,    17,   480,  -387,
     465,   525,   936,   386,   510,   549,  1544,  1544,  1116,  1116,
    1116,  -387,   347,   386,   576,  -387,   525,   560,  -387,   168,
    -387,   936,   936,   563,  -387,   936,   584,   736,   777,   834,
      20,   565,  -387,   875,   936,  -387,  -387,   323,  -387,    23,
    -387,  -387,   936,   348,   191,   446,  -387,     9,   446,   569,
    -387,   463,   463,  -387,    22,   590,  -387,   595,   596,   597,
      22,  1098,    22,    22,    22,   598,    22,  -387,  -387,  -387,
    -387,  1544,   936,   508,   480,   510,   386,   618,   583,  1544,
    1544,  1544,    92,   591,   510,   603,  -387,   611,   482,   386,
     355,   295,   386,  -387,   936,   936,   565,   936,   565,   936,
     565,  -387,  -387,   936,    19,  1262,  -387,    -5,   469,   605,
     599,   367,   615,  -387,  -387,   446,  -387,   383,  -387,   390,
     522,   517,   517,  -387,   585,  -387,   612,  -387,  -387,  -387,
    -387,  -387,  -387,   617,   620,  -387,  -387,   386,   525,   508,
     517,   586,   517,   629,   671,   936,    94,  -387,   613,   614,
    -387,   936,  -387,  -387,   565,   565,   565,   565,  -387,   936,
     936,   631,  -387,  -387,  -387,   405,  -387,  -387,  -387,  -387,
    -387,    22,   634,  -387,   638,   510,   525,  -387,  -387,  -387,
     561,  -387,  -387,   409,   386,   671,   936,  -387,   639,   386,
     386,   386,  -387,  -387,  -387,  -387,  -387,   618,   510,   416,
     606,   423,   386,   623,   517,   517,  -387,   936,   607,  -387,
    -387,  -387,   386,   936,   386
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
      39,     0,     6,    27,     0,     0,     2,    39,     7,    12,
       4,    25,    24,     0,    18,    31,    19,    20,    21,    22,
      23,    32,    33,    15,    17,    13,     9,   212,   210,   209,
     211,    26,    28,   213,    30,   191,    39,    39,   198,    34,
      40,   188,   189,     0,   192,   199,     1,     3,     5,     8,
      11,   148,     0,     0,     0,   148,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,   201,     0,
     193,     0,    10,     0,   274,   148,   148,   278,   279,   282,
     283,   159,     0,    39,    39,     0,     0,   158,     0,     0,
     286,   219,    45,    48,   149,   150,   157,   152,   221,   223,
     225,   252,   267,   269,   275,   276,   277,     0,     0,     0,
       0,     0,     0,   186,     0,   179,   138,   186,    74,    14,
      16,   197,   195,   196,    35,    37,    36,    38,     0,   207,
     190,   194,   288,    47,    46,    39,    39,   240,     0,     0,
       0,     0,     0,     0,     0,     0,   291,   225,     0,   290,
     292,   294,   327,   291,     0,     0,   263,   262,   264,     0,
     265,     0,     0,     0,   219,   118,     0,     0,     0,     0,
     235,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   281,   280,   268,
       0,   288,     0,    63,     0,   219,     0,     0,     0,   219,
     141,     0,   140,   183,     0,     0,   164,   168,   164,     0,
       0,     0,   203,   202,   205,   206,     0,     0,     0,   287,
       0,     0,     0,     0,     0,   338,   314,   315,     0,     0,
     271,   328,     0,     0,     0,     0,     0,   316,   317,   285,
       0,   284,   241,   214,   220,   147,     0,   118,     0,     0,
     121,   151,   153,     0,   222,   224,   242,   244,   293,   250,
       0,     0,   236,   237,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   261,   260,   259,   253,   254,   255,   256,
     257,   258,     0,     0,     0,     0,     0,     0,   266,   320,
     323,   225,     0,   322,   324,   331,     0,     0,     0,   186,
      52,     0,     0,     0,    39,     0,   123,   219,     0,   187,
     123,     0,     0,   351,   352,   353,   170,     0,   180,     0,
       0,   114,   114,   166,   166,   139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    81,    83,     0,   208,   200,
     273,     0,     0,     0,     0,   341,   339,     0,     0,   329,
     335,   309,   310,   311,   312,   313,   289,     0,   219,   215,
     217,   214,   121,   119,   117,   120,     0,   123,   155,     0,
       0,     0,   243,   245,   251,     0,     0,   238,   239,   325,
     321,   326,   332,   319,   270,   272,     0,     0,     0,     0,
     219,    62,   160,     0,     0,     0,     0,    58,    59,    63,
       0,   132,    49,    75,   132,     0,     0,   142,     0,     0,
     171,   173,   184,     0,   165,   169,     0,    77,    78,     0,
     167,     0,   114,     0,   114,     0,    86,    98,    87,    88,
     104,     0,    89,   107,     0,    90,     0,    91,   102,    92,
      82,   204,   295,   296,   303,   301,   307,   308,     0,   340,
     304,   302,   305,   306,     0,   330,   336,     0,   118,   216,
     219,   123,     0,   122,   132,     0,   246,   248,     0,     0,
     333,   318,     0,    53,     0,    51,   123,     0,    65,     0,
      64,     0,     0,    66,    68,     0,     0,     0,     0,     0,
     344,   124,   343,     0,     0,    73,    76,    39,   356,   357,
     354,   350,     0,     0,   176,     0,   174,   181,     0,   115,
     347,   164,   164,    84,     0,     0,    85,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   300,   299,   298,
     297,   337,     0,   121,   118,   132,   116,   144,     0,   247,
     249,   334,     0,     0,   132,     0,   162,     0,     0,    72,
       0,     0,    61,    60,     0,     0,   127,     0,   125,     0,
     126,   345,   346,     0,   134,   225,   133,   135,   278,     0,
       0,     0,     0,   355,   172,     0,   177,     0,   185,     0,
       0,   114,   114,    94,     0,    96,     0,    97,   103,   105,
     110,   109,   106,   357,     0,   100,   101,   218,   123,   121,
     114,     0,   114,   154,     0,     0,     0,    50,     0,     0,
      70,     0,    69,    67,   128,   129,   130,   131,   342,     0,
       0,     0,   112,   111,   358,     0,   175,   349,   348,    79,
      80,     0,     0,   108,     0,   132,   123,    44,   143,   145,
       0,    43,   156,     0,    54,     0,     0,   161,     0,    71,
     136,   137,   113,   178,    93,    95,    99,   144,   132,     0,
       0,     0,    56,     0,   114,   114,   146,     0,     0,   163,
      41,    42,    55,     0,    57
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -387,  -387,  -387,  -387,    48,    38,  -387,   685,  -387,  -387,
    -387,   520,  -387,     4,   180,    13,  -387,   640,  -387,  -387,
     385,   300,  -387,   293,   204,  -387,   140,   211,  -387,  -387,
    -387,  -387,  -387,  -387,   361,  -387,  -387,   284,  -387,  -387,
    -387,   179,  -387,   182,  -387,   184,  -315,   452,  -250,  -345,
    -309,  -386,  -160,   496,  -387,    50,  -387,   485,  -387,   559,
    -387,   406,  -208,   392,  -109,   399,  -387,  -387,  -105,   120,
     363,   -27,   666,   670,  -387,  -387,  -387,  -387,    -2,    15,
     362,  -387,   366,  -148,   -51,   570,   571,   -49,  -387,  -387,
    -387,   -87,  -387,  -387,  -387,   552,   -81,   500,   460,  -128,
    -381,  -387,   346,   251,  -280,  -191,    33,   187,  -387,   165,
    -334,   354,  -303,   230,  -387,   169
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     5,     6,     7,     8,     9,    25,    10,    11,    31,
      32,    12,    38,    90,   145,    67,    91,    92,    15,    16,
     309,   310,    17,   314,   408,   493,   494,   558,    18,    19,
      20,    21,    22,   345,   346,   434,   436,   438,   445,   447,
     439,   440,   442,   443,   599,   508,   427,   373,   260,   377,
     411,   505,   115,   212,   650,   612,   164,    93,    94,    95,
      96,   404,   331,   429,   430,   217,   218,   219,   209,    40,
      41,    42,    43,    44,   129,   223,   226,   227,    45,   116,
     368,   369,   370,   165,   500,    98,    99,   100,   101,   102,
     103,   104,   199,   105,   106,   228,   154,   149,   267,   150,
     302,   303,   390,   151,   304,   152,   501,   502,   519,   520,
     322,   323,   324,   510,   325,   583
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      97,    33,   148,   255,    97,   113,   216,   372,    39,   305,
     332,   414,   221,    14,   198,   482,   257,   428,    34,   391,
      14,   208,   208,   420,    97,    97,   315,   471,   506,   630,
      33,   117,   146,   153,   147,   147,   156,   157,   542,   158,
     160,    39,   130,   268,   311,   588,    50,    61,   329,    65,
      26,   229,   571,   572,   629,    33,    39,   316,   204,   262,
     167,   320,    39,    39,    50,    46,    39,   399,   474,    77,
       1,    78,   406,    39,   529,   263,   168,   582,   168,   330,
       4,   153,    69,   147,   168,   513,   137,   168,   547,   230,
     231,   233,   235,   236,   237,   239,    65,    72,  -197,   312,
     168,   168,   313,   396,   168,  -197,   160,    62,   305,    60,
      50,   254,    39,   391,    39,    97,    39,   523,   516,   526,
     229,   397,   266,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   426,   298,    65,   300,
     153,   301,   147,   240,   426,    23,    24,    68,   614,   610,
     655,    33,   545,   252,   268,    39,   330,    47,   617,   412,
     168,   210,   107,   581,   525,   307,   615,   554,   656,   118,
      13,   587,     4,   353,   589,   355,   326,    13,   328,   357,
     211,   308,   360,   361,   362,   363,   364,   365,   608,   153,
     327,   147,   305,   418,   400,   305,   514,   374,   374,    69,
      39,   586,    39,   402,    70,   556,    64,    64,   543,    39,
     468,    71,   419,   135,    33,   515,   136,   432,   203,   403,
     205,   557,   207,   653,     1,     2,     3,   108,   418,     4,
     421,   348,   109,   382,   384,   385,   386,   387,   388,     4,
     389,   635,   486,   441,   444,   446,   448,   585,   213,   667,
      39,   250,   161,   251,   646,   162,     3,   413,    35,   214,
      28,    29,   163,    30,   671,   512,   639,   640,   424,     4,
      51,   253,   675,   215,    36,  -182,    55,    37,  -182,    57,
      58,  -196,   124,   449,   609,   647,   110,   651,  -196,   645,
     125,   256,   452,   453,   162,   458,    77,   459,    78,   464,
     465,   197,   126,   591,   592,    73,    74,   127,    27,    39,
      28,    29,   544,    30,   128,   473,   317,   407,   319,   132,
      75,   476,   477,     1,    49,    73,    74,   668,   393,   333,
     394,     4,   334,   360,   389,   300,   483,   301,   422,    76,
      77,   423,    78,   131,    79,    80,    81,   166,   491,   680,
     681,   492,   312,    82,   509,   313,    83,   224,   225,    84,
     578,    39,    78,   169,    79,    80,   371,   191,   192,   193,
     194,   138,   139,    82,   196,   416,    83,   417,   200,    84,
     579,   140,    35,   141,    28,    29,   201,    30,    85,    86,
      87,   142,   489,   143,   490,    88,    89,   580,    36,   202,
     144,    37,   393,   416,   552,   584,   206,   541,    85,    86,
     621,   546,   622,   305,   220,    88,    89,   119,   120,   549,
     550,   551,   416,   208,   633,   409,   222,   593,    73,    74,
     559,   559,    51,   441,   562,   444,   603,   604,   416,   606,
     636,   649,   574,   577,   575,   416,   153,   637,   147,    73,
      74,   509,   249,   250,   305,     4,   121,   168,    28,    29,
     416,    30,   663,    77,   393,    78,   670,    79,    80,    81,
     509,   250,    36,   676,   318,    37,    82,   162,   393,    83,
     678,   607,    84,   321,    77,   196,    78,   329,    79,    80,
     347,    73,    74,   258,   259,   138,   139,    82,   349,    27,
      83,    28,    29,    84,    30,   140,   114,   141,   488,   489,
     350,    85,    86,    87,   250,   142,   367,   143,    88,    89,
     566,   568,   570,   376,   144,   378,    77,   379,    78,   395,
      79,    80,    85,    86,   503,   504,   620,   621,   398,    88,
      89,   410,    83,   415,   664,    84,    63,    66,   214,   234,
     133,   134,   426,   300,   654,   301,   433,   472,   435,   669,
     659,   437,   475,    73,    74,   451,   487,   484,   660,   661,
     399,   495,   512,   330,    85,    86,   527,   521,   518,   524,
     535,    88,   155,   522,   406,   528,   548,   624,   625,   153,
     626,   147,   627,   529,   300,   672,   301,   530,    77,    33,
      78,   531,    79,    80,    73,    74,   532,   533,   534,   138,
     139,    82,   536,   553,    83,   555,   682,    84,   561,   140,
     573,   141,   684,    27,   590,    28,    29,   594,    30,   142,
     114,   143,   595,   596,   597,   605,   611,   613,   144,    77,
     618,    78,   648,    79,    80,   616,    85,    86,   619,   631,
     138,   139,   634,    88,    89,    83,   632,   642,    84,   641,
     140,   582,   141,    73,    74,   644,   652,   657,   662,   658,
     142,   665,   143,    73,    74,   666,   673,   679,   497,   144,
     677,   683,    48,   498,   499,   111,   401,    85,    86,   485,
     563,   623,   496,   560,    88,   155,   450,   517,    77,   598,
      78,   375,    79,    80,   602,   600,   335,   674,    77,   405,
      78,    82,    79,    80,    83,   261,   431,    84,   122,   425,
     467,    82,   123,   470,    83,   469,   299,    84,   264,   481,
     265,   141,   189,   190,   191,   192,   193,   194,    73,    74,
     366,   196,   383,   306,   576,   638,    85,    86,    73,    74,
     628,   601,     0,    88,    89,   112,    85,    86,   564,   565,
     511,     0,   643,    88,    89,     0,     0,     0,     0,    73,
      74,     0,     0,    77,     0,    78,     0,    79,    80,    73,
      74,     0,     0,    77,     0,    78,    82,    79,    80,    83,
       0,     0,    84,     0,   567,     0,    82,     0,     0,    83,
       0,     0,    84,     0,    77,     0,    78,     0,    79,    80,
      73,    74,     0,     0,    77,     0,    78,     0,    79,    80,
      83,    85,    86,    84,     0,     0,   456,    82,    88,    89,
      83,    85,    86,    84,     0,     0,    73,    74,    88,    89,
       0,     0,   457,     0,     0,    77,     0,    78,     0,    79,
      80,   569,    85,    86,     0,     0,     0,     0,     0,    88,
     155,    83,    85,    86,    84,     0,     0,   462,     0,    88,
      89,    77,     0,    78,     0,    79,    80,    73,    74,     0,
     454,     0,     0,   463,    82,     0,     0,    83,     0,     0,
      84,     0,     0,    85,    86,     0,   455,    73,    74,     0,
      88,   155,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,    77,     0,    78,   196,    79,    80,     0,    85,
      86,     0,     0,     0,     0,    82,    88,    89,    83,     0,
       0,    84,    77,     0,    78,   141,    79,    80,    73,    74,
       0,     0,     0,     0,     0,   159,     0,     0,    83,     0,
       0,    84,     0,     0,     0,     0,    73,    74,     0,     0,
      85,    86,     0,     0,     0,    73,    74,    88,    89,     0,
       0,     0,     0,    77,     0,    78,     0,    79,    80,     0,
      85,    86,     0,     0,     0,     0,    82,    88,   155,    83,
       0,    77,    84,    78,     0,    79,    80,     0,     0,     0,
      77,     0,    78,     0,    79,    80,     0,    83,     0,   232,
      84,     0,     0,     0,     0,     0,    83,     0,   238,    84,
       0,    85,    86,    73,    74,     0,     0,     0,    88,    89,
       0,     0,    73,    74,     0,     0,     0,     0,     0,    85,
      86,     0,     0,     0,     0,     0,    88,   155,    85,    86,
       0,     0,     0,     0,     0,    88,   155,     0,    77,     0,
      78,     0,    79,    80,     0,     0,     0,    77,     0,    78,
       0,    79,    80,     0,    83,     0,     0,    84,     0,     0,
       0,   359,     0,    83,     0,     0,    84,     0,     0,     0,
     141,    73,    74,   188,   189,   190,   191,   192,   193,   194,
      73,    74,     0,   196,     0,     0,    85,    86,     0,     0,
       0,     0,     0,    88,   155,    85,    86,     0,    73,    74,
       0,     0,    88,   155,     0,     0,    77,     0,    78,     0,
      79,    80,   354,     0,     0,    77,     0,    78,     0,    79,
      80,     0,    83,     0,     0,    84,     0,     0,    82,   480,
       0,    83,     0,    77,   507,    78,   352,    79,    80,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,    83,
       0,   196,    84,     0,    85,    86,     0,     0,     0,     0,
       0,    88,   155,    85,    86,     0,     0,     0,     0,     0,
      88,    89,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    85,    86,     0,   196,     0,     0,   170,    88,   155,
     171,   172,   173,   174,     0,   175,   176,   292,   293,   294,
     295,     0,   296,   297,   241,     0,   242,   243,   244,   245,
     246,   247,     0,   248,     0,     0,     0,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,   170,   195,   196,   171,
     172,   173,   174,     0,   175,   176,    51,    52,     0,    53,
       0,    54,    55,   392,    56,    57,    58,    59,     0,     0,
       0,     0,     0,     0,     0,     0,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   170,   195,   196,   171,   172,
     173,   174,     0,   175,   176,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,   381,     0,
       0,     0,     0,     0,     0,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,     0,   170,   195,   196,   171,   172,   173,
     174,     0,   175,   176,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   479,     0,     0,   196,     0,     0,     0,
       0,     0,     0,     0,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   358,     0,   195,   196,     0,     0,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,     0,
       0,   196,   460,     0,     0,     0,     0,     0,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   461,   537,
       0,   196,     0,     0,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,     0,   538,   539,   196,     0,     0,
       0,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,     0,   540,     0,   196,     0,     0,     0,     0,   186,
     187,   188,   189,   190,   191,   192,   193,   194,     0,     0,
     241,   196,   242,   243,   244,   245,   246,   247,     0,   248,
       0,     0,     0,   356,     0,     0,     0,     0,     0,     0,
       0,     0,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   466,     0,     0,   196,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   392,     0,     0,   196,     0,     0,
       0,     0,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,     0,     0,   196,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   351,     0,     0,   196,     0,
       0,     0,     0,     0,     0,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   380,     0,     0,   196,     0,     0,
       0,     0,     0,     0,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   478,     0,     0,   196,     0,     0,     0,
       0,     0,     0,   186,   187,   188,   189,   190,   191,   192,
     193,   194,     0,     0,     0,   196,   186,   187,   188,   189,
     190,   191,   192,   193,   194,     0,     0,     0,   196,   187,
     188,   189,   190,   191,   192,   193,   194,     0,     0,     0,
     196,   336,   337,   338,   339,   340,   341,   342,   343,   344
};

static const yytype_int16 yycheck[] =
{
      51,     3,    83,   163,    55,    56,   115,   257,     4,   200,
     218,   320,   117,     0,   101,   396,   164,   332,     3,   299,
       7,    19,    19,   326,    75,    76,    29,   372,   414,    34,
      32,    58,    83,    84,    83,    84,    85,    86,    21,    88,
      89,    37,    69,   171,     8,    36,     8,    32,    34,    36,
       2,   132,    32,    33,    35,    57,    52,   205,   109,    47,
      54,   209,    58,    59,    26,     0,    62,    65,   377,    47,
       3,    49,    10,    69,    65,    63,    81,    54,    81,    65,
      18,   132,    65,   132,    81,   419,    82,    81,   474,   138,
     139,   140,   141,   142,   143,   144,    83,    49,    47,    63,
      81,    81,    66,    66,    81,    54,   155,    56,   299,    65,
      72,   162,   108,   393,   110,   166,   112,   432,   421,   434,
     201,    84,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,    45,   196,   135,   200,
     201,   200,   201,    64,    45,    47,    48,    37,    66,   545,
      66,   163,   471,   159,   292,   161,    65,    71,   554,   317,
      81,    47,    52,   507,    65,    47,    84,   486,    84,    59,
       0,   515,    18,   232,   518,   234,    47,     7,   215,   238,
      66,    63,   241,   242,   243,   244,   245,   246,   543,   250,
      61,   250,   393,    47,   309,   396,    47,   258,   259,    65,
     206,   514,   208,    47,    47,    47,    36,    37,   468,   215,
     368,    54,    66,    63,   226,    66,    66,   336,   108,    63,
     110,    63,   112,   614,     3,     4,     5,    29,    47,    18,
     327,   226,    34,   292,   293,   294,   295,   296,   297,    18,
     299,   585,   400,   340,   341,   342,   343,    66,    36,   645,
     256,    65,    19,    67,   609,    22,     5,   318,    47,    47,
      49,    50,    29,    52,   655,    84,   591,   592,   329,    18,
       6,   161,   668,    61,    63,    63,    12,    66,    66,    15,
      16,    47,    64,   344,   544,   610,    19,   612,    54,   608,
      64,    19,   351,   352,    22,   354,    47,   356,    49,   358,
     359,    52,    67,   521,   522,    12,    13,    67,    47,   315,
      49,    50,   470,    52,    30,   376,   206,   314,   208,    63,
      27,   380,   381,     3,     4,    12,    13,   646,    65,    63,
      67,    18,    66,   392,   393,   396,   397,   396,    36,    46,
      47,    39,    49,    47,    51,    52,    53,    65,    63,   674,
     675,    66,    63,    60,   415,    66,    63,    28,    29,    66,
      47,   367,    49,    82,    51,    52,   256,    97,    98,    99,
     100,    58,    59,    60,   104,    65,    63,    67,    66,    66,
      67,    68,    47,    70,    49,    50,    63,    52,    95,    96,
      97,    78,    65,    80,    67,   102,   103,    84,    63,     8,
      87,    66,    65,    65,    67,    67,    19,   466,    95,    96,
      65,   472,    67,   614,    54,   102,   103,    47,    48,   478,
     479,   480,    65,    19,    67,   315,    47,   524,    12,    13,
     491,   492,     6,   530,   495,   532,   533,   534,    65,   536,
      67,   611,   503,   504,   503,    65,   507,    67,   507,    12,
      13,   512,    64,    65,   655,    18,    47,    81,    49,    50,
      65,    52,    67,    47,    65,    49,    67,    51,    52,    53,
     531,    65,    63,    67,    14,    66,    60,    22,    65,    63,
      67,   542,    66,    47,    47,   104,    49,    34,    51,    52,
      65,    12,    13,    23,    24,    58,    59,    60,    67,    47,
      63,    49,    50,    66,    52,    68,    54,    70,    64,    65,
      64,    95,    96,    97,    65,    78,    20,    80,   102,   103,
     497,   498,   499,    25,    87,    47,    47,    47,    49,    64,
      51,    52,    95,    96,    34,    35,    64,    65,    47,   102,
     103,    26,    63,    84,   641,    66,    36,    37,    47,    70,
      75,    76,    45,   614,   615,   614,    47,    65,    47,   650,
     621,    47,    65,    12,    13,    47,    47,    65,   629,   630,
      65,    34,    84,    65,    95,    96,    55,    64,    66,    84,
      55,   102,   103,    67,    10,    65,    47,   564,   565,   650,
     567,   650,   569,    65,   655,   656,   655,    65,    47,   611,
      49,    84,    51,    52,    12,    13,    65,    84,    65,    58,
      59,    60,    65,    47,    63,    65,   677,    66,    65,    68,
      65,    70,   683,    47,    65,    49,    50,    47,    52,    78,
      54,    80,    47,    47,    47,    47,    28,    64,    87,    47,
      47,    49,    66,    51,    52,    64,    95,    96,    47,    54,
      58,    59,    47,   102,   103,    63,    67,    55,    66,    84,
      68,    54,    70,    12,    13,    55,    47,    64,    47,    65,
      78,    47,    80,    12,    13,    47,    47,    64,    27,    87,
      84,    84,     7,    32,    33,    55,   311,    95,    96,   399,
     496,   561,   409,   492,   102,   103,   345,   423,    47,   530,
      49,   259,    51,    52,   532,   531,   220,   667,    47,   313,
      49,    60,    51,    52,    63,   166,   334,    66,    62,   330,
     367,    60,    62,   371,    63,   369,    65,    66,   168,   393,
     169,    70,    95,    96,    97,    98,    99,   100,    12,    13,
     250,   104,   292,   201,   503,   590,    95,    96,    12,    13,
     573,   531,    -1,   102,   103,    19,    95,    96,    32,    33,
     416,    -1,   603,   102,   103,    -1,    -1,    -1,    -1,    12,
      13,    -1,    -1,    47,    -1,    49,    -1,    51,    52,    12,
      13,    -1,    -1,    47,    -1,    49,    60,    51,    52,    63,
      -1,    -1,    66,    -1,    27,    -1,    60,    -1,    -1,    63,
      -1,    -1,    66,    -1,    47,    -1,    49,    -1,    51,    52,
      12,    13,    -1,    -1,    47,    -1,    49,    -1,    51,    52,
      63,    95,    96,    66,    -1,    -1,    69,    60,   102,   103,
      63,    95,    96,    66,    -1,    -1,    12,    13,   102,   103,
      -1,    -1,    85,    -1,    -1,    47,    -1,    49,    -1,    51,
      52,    27,    95,    96,    -1,    -1,    -1,    -1,    -1,   102,
     103,    63,    95,    96,    66,    -1,    -1,    69,    -1,   102,
     103,    47,    -1,    49,    -1,    51,    52,    12,    13,    -1,
      69,    -1,    -1,    85,    60,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,    95,    96,    -1,    85,    12,    13,    -1,
     102,   103,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    47,    -1,    49,   104,    51,    52,    -1,    95,
      96,    -1,    -1,    -1,    -1,    60,   102,   103,    63,    -1,
      -1,    66,    47,    -1,    49,    70,    51,    52,    12,    13,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    63,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    12,    13,    -1,    -1,
      95,    96,    -1,    -1,    -1,    12,    13,   102,   103,    -1,
      -1,    -1,    -1,    47,    -1,    49,    -1,    51,    52,    -1,
      95,    96,    -1,    -1,    -1,    -1,    60,   102,   103,    63,
      -1,    47,    66,    49,    -1,    51,    52,    -1,    -1,    -1,
      47,    -1,    49,    -1,    51,    52,    -1,    63,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    63,    -1,    65,    66,
      -1,    95,    96,    12,    13,    -1,    -1,    -1,   102,   103,
      -1,    -1,    12,    13,    -1,    -1,    -1,    -1,    -1,    95,
      96,    -1,    -1,    -1,    -1,    -1,   102,   103,    95,    96,
      -1,    -1,    -1,    -1,    -1,   102,   103,    -1,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    -1,    47,    -1,    49,
      -1,    51,    52,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,
      70,    12,    13,    94,    95,    96,    97,    98,    99,   100,
      12,    13,    -1,   104,    -1,    -1,    95,    96,    -1,    -1,
      -1,    -1,    -1,   102,   103,    95,    96,    -1,    12,    13,
      -1,    -1,   102,   103,    -1,    -1,    47,    -1,    49,    -1,
      51,    52,    65,    -1,    -1,    47,    -1,    49,    -1,    51,
      52,    -1,    63,    -1,    -1,    66,    -1,    -1,    60,    70,
      -1,    63,    -1,    47,    66,    49,    56,    51,    52,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    63,
      -1,   104,    66,    -1,    95,    96,    -1,    -1,    -1,    -1,
      -1,   102,   103,    95,    96,    -1,    -1,    -1,    -1,    -1,
     102,   103,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    95,    96,    -1,   104,    -1,    -1,    53,   102,   103,
      56,    57,    58,    59,    -1,    61,    62,    56,    57,    58,
      59,    -1,    61,    62,    70,    -1,    72,    73,    74,    75,
      76,    77,    -1,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    53,   103,   104,    56,
      57,    58,    59,    -1,    61,    62,     6,     7,    -1,     9,
      -1,    11,    12,    70,    14,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    53,   103,   104,    56,    57,
      58,    59,    -1,    61,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    53,   103,   104,    56,    57,    58,
      59,    -1,    61,    62,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    56,    -1,    -1,   104,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    65,    -1,   103,   104,    -1,    -1,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,   104,    69,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    85,    69,
      -1,   104,    -1,    -1,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    85,    69,   104,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    85,    -1,   104,    -1,    -1,    -1,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      70,   104,    72,    73,    74,    75,    76,    77,    -1,    79,
      -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    70,    -1,    -1,   104,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    70,    -1,    -1,   104,    -1,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,   104,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    82,    -1,    -1,   104,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    82,    -1,    -1,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    82,    -1,    -1,   104,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,   104,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,   104,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
     104,    36,    37,    38,    39,    40,    41,    42,    43,    44
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     3,     4,     5,    18,   106,   107,   108,   109,   110,
     112,   113,   116,   119,   120,   123,   124,   127,   133,   134,
     135,   136,   137,    47,    48,   111,   109,    47,    49,    50,
      52,   114,   115,   183,   184,    47,    63,    66,   117,   118,
     174,   175,   176,   177,   178,   183,     0,    71,   112,     4,
     110,     6,     7,     9,    11,    12,    14,    15,    16,    17,
      65,   184,    56,   116,   119,   120,   116,   120,   174,    65,
      47,    54,   109,    12,    13,    27,    46,    47,    49,    51,
      52,    53,    60,    63,    66,    95,    96,    97,   102,   103,
     118,   121,   122,   162,   163,   164,   165,   189,   190,   191,
     192,   193,   194,   195,   196,   198,   199,   174,    29,    34,
      19,   122,    19,   189,    54,   157,   184,   176,   174,    47,
      48,    47,   177,   178,    64,    64,    67,    67,    30,   179,
     176,    47,    63,   162,   162,    63,    66,   118,    58,    59,
      68,    70,    78,    80,    87,   119,   189,   192,   201,   202,
     204,   208,   210,   189,   201,   103,   192,   192,   192,    60,
     192,    19,    22,    29,   161,   188,    65,    54,    81,    82,
      53,    56,    57,    58,    59,    61,    62,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   103,   104,    52,   196,   197,
      66,    63,     8,   174,   189,   174,    19,   174,    19,   173,
      47,    66,   158,    36,    47,    61,   169,   170,   171,   172,
      54,   173,    47,   180,    28,    29,   181,   182,   200,   201,
     192,   192,    65,   192,    70,   192,   192,   192,    65,   192,
      64,    70,    72,    73,    74,    75,    76,    77,    79,    64,
      65,    67,   118,   174,   189,   157,    19,   188,    23,    24,
     153,   164,    47,    63,   190,   191,   192,   203,   204,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,    56,    57,    58,    59,    61,    62,   192,    65,
     189,   192,   205,   206,   209,   210,   200,    47,    63,   125,
     126,     8,    63,    66,   128,    29,   188,   174,    14,   174,
     188,    47,   215,   216,   217,   219,    47,    61,   176,    34,
      65,   167,   167,    63,    66,   158,    36,    37,    38,    39,
      40,    41,    42,    43,    44,   138,   139,    65,   184,    67,
      64,    82,    56,   192,    65,   192,    70,   192,    65,    70,
     192,   192,   192,   192,   192,   192,   202,    20,   185,   186,
     187,   174,   153,   152,   189,   152,    25,   154,    47,    47,
      82,    56,   192,   203,   192,   192,   192,   192,   192,   192,
     207,   209,    70,    65,    67,    64,    66,    84,    47,    65,
     173,   125,    47,    63,   166,   166,    10,   120,   129,   174,
      26,   155,   188,   189,   155,    84,    65,    67,    47,    66,
     217,   196,    36,    39,   189,   170,    45,   151,   151,   168,
     169,   168,   169,    47,   140,    47,   141,    47,   142,   145,
     146,   196,   147,   148,   196,   143,   196,   144,   196,   189,
     139,    47,   192,   192,    69,    85,    69,    85,   192,   192,
      69,    85,    69,    85,   192,   192,    70,   175,   188,   187,
     185,   154,    65,   189,   155,    65,   192,   192,    82,    56,
      70,   207,   205,   189,    65,   126,   188,    47,    64,    65,
      67,    63,    66,   130,   131,    34,   128,    27,    32,    33,
     189,   211,   212,    34,    35,   156,   156,    66,   150,   189,
     218,   216,    84,   215,    47,    66,   217,   142,    66,   213,
     214,    64,    67,   151,    84,    65,   151,    55,    65,    65,
      65,    84,    65,    84,    65,    55,    65,    69,    85,    69,
      85,   192,    21,   153,   188,   155,   189,   156,    47,   192,
     192,   192,    67,    47,   155,    65,    47,    63,   132,   189,
     132,    65,   189,   129,    32,    33,   211,    27,   211,    27,
     211,    32,    33,    65,   189,   192,   208,   189,    47,    67,
      84,   215,    54,   220,    67,    66,   217,   215,    36,   215,
      65,   167,   167,   196,    47,    47,    47,    47,   146,   149,
     150,   218,   148,   196,   196,    47,   196,   189,   154,   153,
     156,    28,   160,    64,    66,    84,    64,   156,    47,    47,
      64,    65,    67,   131,   211,   211,   211,   211,   212,    35,
      34,    54,    67,    67,    47,   215,    67,    67,   214,   151,
     151,    84,    55,   220,    55,   155,   154,   151,    66,   157,
     159,   151,    47,   205,   189,    66,    84,    64,    65,   189,
     189,   189,    47,    67,   196,    47,    47,   156,   155,   201,
      67,   205,   189,    47,   160,   156,    67,    84,    67,    64,
     151,   151,   189,    84,   189
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   105,   106,   106,   107,   107,   108,   108,   108,   108,
     108,   109,   109,   110,   111,   111,   111,   111,   112,   112,
     112,   112,   112,   112,   112,   112,   113,   114,   114,   115,
     115,   116,   116,   116,   117,   117,   117,   118,   118,   119,
     119,   120,   120,   120,   120,   121,   121,   121,   122,   123,
     124,   125,   125,   126,   126,   126,   126,   126,   127,   127,
     127,   127,   127,   128,   128,   128,   129,   130,   130,   131,
     131,   132,   132,   133,   134,   135,   135,   136,   136,   136,
     136,   137,   138,   138,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   140,   140,   141,   141,   142,   142,   143,
     143,   144,   144,   145,   145,   146,   147,   147,   148,   149,
     149,   150,   150,   150,   151,   151,   152,   152,   153,   153,
     153,   154,   154,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   156,   156,   156,   156,   156,   156,   157,   157,
     157,   158,   158,   159,   160,   160,   160,   161,   162,   162,
     163,   163,   164,   164,   164,   164,   164,   164,   165,   165,
     166,   166,   166,   166,   167,   167,   168,   168,   169,   169,
     170,   170,   170,   170,   170,   170,   170,   170,   170,   171,
     171,   171,   172,   172,   172,   172,   173,   173,   174,   175,
     175,   176,   176,   176,   176,   176,   177,   177,   178,   178,
     178,   179,   179,   180,   180,   181,   181,   182,   182,   183,
     183,   183,   184,   184,   185,   185,   186,   186,   187,   188,
     188,   189,   189,   190,   190,   191,   191,   191,   191,   191,
     191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
     191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
     191,   191,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   193,   193,   194,
     194,   195,   195,   195,   195,   195,   195,   195,   196,   196,
     197,   197,   198,   198,   199,   199,   199,   200,   200,   201,
     201,   202,   202,   203,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   205,   205,
     205,   205,   205,   206,   206,   207,   207,   208,   208,   208,
     208,   209,   209,   209,   209,   210,   210,   210,   210,   210,
     210,   210,   211,   211,   212,   212,   212,   213,   213,   214,
     215,   215,   216,   216,   217,   218,   219,   220,   220
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     2,     1,     2,     1,     1,     2,     2,
       3,     2,     1,     2,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     0,     1,     2,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     0,
       2,    13,    13,    10,    10,     1,     2,     2,     1,     6,
       9,     3,     1,     3,     6,     9,     7,    10,     6,     6,
       8,     8,     6,     0,     3,     3,     2,     3,     1,     3,
       3,     3,     1,     7,     3,     6,     7,     6,     6,     9,
       9,     5,     2,     1,     3,     3,     2,     2,     2,     2,
       2,     2,     2,     5,     3,     5,     3,     3,     1,     5,
       3,     3,     1,     3,     1,     3,     3,     1,     4,     1,
       1,     3,     3,     4,     0,     2,     3,     1,     0,     2,
       2,     0,     2,     0,     2,     3,     3,     3,     4,     4,
       4,     4,     0,     2,     2,     2,     4,     4,     1,     3,
       2,     1,     3,     1,     0,     2,     4,     2,     0,     1,
       1,     3,     1,     3,     7,     4,     8,     1,     1,     1,
       1,     5,     3,     7,     0,     2,     0,     1,     1,     3,
       2,     3,     5,     3,     4,     6,     4,     5,     7,     0,
       2,     4,     0,     1,     3,     5,     0,     2,     1,     1,
       3,     1,     1,     2,     3,     3,     1,     1,     1,     1,
       5,     0,     2,     1,     3,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     0,     1,     2,     1,     4,     0,
       2,     1,     3,     1,     3,     1,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     3,     3,     4,     4,
       2,     3,     3,     4,     3,     4,     5,     6,     5,     6,
       3,     4,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     2,     2,     3,     1,     2,     1,
       4,     3,     4,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     1,     1,     0,     3,
       1,     1,     1,     1,     1,     4,     4,     5,     5,     5,
       5,     4,     4,     4,     4,     4,     4,     4,     4,     3,
       3,     3,     3,     3,     2,     2,     2,     2,     3,     2,
       1,     2,     1,     1,     1,     1,     1,     1,     2,     3,
       4,     1,     2,     3,     4,     3,     4,     5,     2,     3,
       4,     3,     3,     1,     1,     2,     2,     1,     3,     3,
       3,     1,     1,     1,     3,     2,     3,     0,     2
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if TABLEGRAMDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !TABLEGRAMDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !TABLEGRAMDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
{
  YYUSE (yyvaluep);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 6:
#line 289 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2151 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 8:
#line 292 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2157 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 9:
#line 294 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2163 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 10:
#line 296 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.setTiming (True); }
#line 2169 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 14:
#line 309 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.set ((yyvsp[0].val)->getString()); }
#line 2175 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 15:
#line 311 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.set ((yyvsp[0].val)->getString()); }
#line 2181 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 16:
#line 313 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.defineSynonym ((yyvsp[0].val)->getString()); }
#line 2187 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 17:
#line 315 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirStyle.defineSynonym ((yyvsp[0].val)->getString()); }
#line 2193 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 18:
#line 320 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].nodeselect); }
#line 2199 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 19:
#line 322 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2205 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 20:
#line 324 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2211 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 21:
#line 326 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2217 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 22:
#line 328 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2223 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 23:
#line 330 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2229 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 24:
#line 332 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].nodeselect); }
#line 2235 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 25:
#line 334 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { TaQLNode::theirNode = *(yyvsp[0].node); }
#line 2241 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 26:
#line 338 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(new TaQLShowNodeRep (*(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2250 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 27:
#line 344 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no list */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 2259 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 28:
#line 349 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodelist) = (yyvsp[0].nodelist); }
#line 2265 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 29:
#line 355 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].nodename));
           }
#line 2274 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 30:
#line 359 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (" ");
               (yyval.nodelist)->add (*(yyvsp[0].nodename));
           }
#line 2285 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 31:
#line 369 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodeselect) = (yyvsp[0].nodeselect); }
#line 2291 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 32:
#line 371 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodeselect) = (yyvsp[0].nodeselect); }
#line 2297 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 33:
#line 373 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.nodeselect) = (yyvsp[0].nodeselect); }
#line 2303 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 34:
#line 378 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[0].nodeselect);
	   }
#line 2311 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 35:
#line 381 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2320 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 36:
#line 385 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2329 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 37:
#line 392 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2338 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 38:
#line 396 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = (yyvsp[-1].nodeselect);
	       (yyval.nodeselect)->setBrackets();
	   }
#line 2347 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 39:
#line 403 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no WITH part */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 2356 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 40:
#line 407 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 2364 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 41:
#line 415 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLSelectNodeRep (*(yyvsp[-10].node), *(yyvsp[-12].nodelist), *(yyvsp[-8].nodelist), *(yyvsp[-7].nodelist), *(yyvsp[-6].node), *(yyvsp[-5].node), *(yyvsp[-4].node),
					   *(yyvsp[-3].node), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2375 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 42:
#line 421 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
		    new TaQLSelectNodeRep (*(yyvsp[-10].node), *(yyvsp[-12].nodelist), *(yyvsp[-7].nodelist), *(yyvsp[-6].nodelist), *(yyvsp[-5].node), *(yyvsp[-4].node), *(yyvsp[-3].node),
					   *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[-9].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2386 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 43:
#line 427 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLSelectNodeRep (*(yyvsp[-7].node), *(yyvsp[-9].nodelist), *(yyvsp[-6].node), *(yyvsp[-5].node), *(yyvsp[-4].node),
					   *(yyvsp[-3].node), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2397 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 44:
#line 433 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
		    new TaQLSelectNodeRep (*(yyvsp[-7].node), *(yyvsp[-9].nodelist), *(yyvsp[-5].node), *(yyvsp[-4].node), *(yyvsp[-3].node),
					   *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[-6].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2408 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 45:
#line 442 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 2416 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 46:
#line 445 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2426 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 47:
#line 450 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (True, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2436 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 48:
#line 457 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLColumnsNodeRep (False, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2446 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 49:
#line 465 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCountNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-3].node), *(yyvsp[-1].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2456 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 50:
#line 473 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLUpdateNodeRep (*(yyvsp[-8].nodelist), *(yyvsp[-6].nodelist), *(yyvsp[-4].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2466 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 51:
#line 481 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2475 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 52:
#line 485 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2485 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 53:
#line 494 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-2].val)->getString(), "", *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2495 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 54:
#line 499 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* array slice or mask */
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-5].val)->getString(), "", *(yyvsp[-3].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2506 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 55:
#line 505 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* array slice and mask (in any order) */
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-8].val)->getString(), "", *(yyvsp[-6].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2517 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 56:
#line 511 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-5].val)->getString(),
                                            (yyvsp[-3].val)->getString(), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2528 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 57:
#line 517 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUpdExprNodeRep ((yyvsp[-8].val)->getString(),
                                            (yyvsp[-6].val)->getString(), *(yyvsp[-3].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2539 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 58:
#line 526 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* insert with SELECT command */
	       (yyvsp[0].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-2].nodelist), *(yyvsp[-1].nodelist), *(yyvsp[0].nodeselect), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2551 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 59:
#line 533 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* insert in SQL style */
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-2].nodelist), *(yyvsp[-1].nodelist), *(yyvsp[0].node), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2562 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 60:
#line 539 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-7].nodelist), *(yyvsp[-2].nodelist), *(yyvsp[-1].nodelist), *(yyvsp[0].node), *(yyvsp[-4].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2572 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 61:
#line 544 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-7].nodelist), *(yyvsp[-4].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2582 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 62:
#line 549 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* insert in update style */
	       (yyval.node) = new TaQLNode(
                    new TaQLInsertNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-2].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2593 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 63:
#line 559 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no insert column-list */   
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 2602 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 64:
#line 563 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2610 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 65:
#line 566 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2618 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 66:
#line 571 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].nodelist)->setPPFix ("VALUES ", "");
               (yyval.node) = (yyvsp[0].nodelist);
           }
#line 2627 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 67:
#line 579 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].nodelist));
           }
#line 2636 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 68:
#line 583 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[0].nodelist));
           }
#line 2646 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 69:
#line 592 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2654 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 70:
#line 595 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
           }
#line 2662 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 71:
#line 600 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2671 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 72:
#line 604 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2682 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 73:
#line 613 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLDeleteNodeRep (*(yyvsp[-6].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2692 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 74:
#line 621 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLDropTabNodeRep (*(yyvsp[-2].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2702 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 75:
#line 629 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCalcNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-2].nodelist), *(yyvsp[0].node),
                                         TaQLNode(), TaQLNode(), TaQLNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2713 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 76:
#line 635 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCalcNodeRep (*(yyvsp[-6].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-4].node), *(yyvsp[-2].node), *(yyvsp[-1].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2723 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 77:
#line 646 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCreTabNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-3].node), TaQLMultiNode(), *(yyvsp[-2].nodelist), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2733 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 78:
#line 651 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCreTabNodeRep (*(yyvsp[-5].nodelist), *(yyvsp[-3].node), *(yyvsp[-2].nodelist), TaQLMultiNode(False), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2743 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 79:
#line 656 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyvsp[-3].nodelist)->setPPFix ("(", ")");
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCreTabNodeRep (*(yyvsp[-8].nodelist), *(yyvsp[-6].node), *(yyvsp[-5].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2754 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 80:
#line 662 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyvsp[-3].nodelist)->setPPFix ("[", "]");
	       (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLCreTabNodeRep (*(yyvsp[-8].nodelist), *(yyvsp[-6].node), *(yyvsp[-5].nodelist), *(yyvsp[-3].nodelist), *(yyvsp[-1].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2765 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 81:
#line 671 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodeselect) = new TaQLQueryNode(
                    new TaQLAltTabNodeRep (*(yyvsp[-4].nodelist), *(yyvsp[-2].node), *(yyvsp[-1].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodeselect));
           }
#line 2775 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 82:
#line 679 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2784 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 83:
#line 683 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (" ");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2795 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 84:
#line 692 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode (
                    new TaQLAddColNodeRep(*(yyvsp[-1].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2805 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 85:
#line 697 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLCopyColNodeRep(*(yyvsp[-1].nodelist), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2815 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 86:
#line 702 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(0, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2825 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 87:
#line 707 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(1, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2835 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 88:
#line 712 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSetKeyNodeRep (*(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2845 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 89:
#line 717 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSetKeyNodeRep (*(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2855 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 90:
#line 722 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(2, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2865 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 91:
#line 727 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRenDropNodeRep(3, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2875 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 92:
#line 732 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLAddRowNodeRep(*(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 2885 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 93:
#line 740 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-4].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].val)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
           }
#line 2895 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 94:
#line 745 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (2, "=");
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].val)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
           }
#line 2907 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 95:
#line 755 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-4].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].val)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2917 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 96:
#line 760 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (2, " TO ");
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].val)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2929 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 97:
#line 770 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2938 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 98:
#line 774 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2948 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 99:
#line 782 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-4].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].nodename)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2958 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 100:
#line 787 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setSeparator (2, " TO ");
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-2].nodename)->getString()));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
           }
#line 2970 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 101:
#line 797 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
           }
#line 2979 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 102:
#line 801 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
           }
#line 2989 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 103:
#line 809 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 2998 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 104:
#line 813 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3008 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 105:
#line 819 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep((yyvsp[-2].nodename)->getString(), *(yyvsp[0].noderecfldrep)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
               delete (yyvsp[0].noderecfldrep);
           }
#line 3019 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 106:
#line 828 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3028 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 107:
#line 832 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3038 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 108:
#line 840 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep((yyvsp[-3].nodename)->getString(),
                                          (yyvsp[-1].nodename)->getString(), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3049 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 109:
#line 848 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.noderecfldrep) = (yyvsp[0].noderecfldrep);
           }
#line 3057 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 110:
#line 851 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.noderecfldrep) = (yyvsp[0].noderecfldrep);
           }
#line 3065 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 111:
#line 857 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", *(yyvsp[-1].nodelist), "");
           }
#line 3073 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 112:
#line 860 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       /* Like in glish [=] is the syntax for an empty 'record' */
               TaQLMultiNode empty(False);
               empty.setPPFix ("[", "]");
               (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", empty, "");
           }
#line 3084 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 113:
#line 866 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               /* empty vector of the datatype given by NAME */
               (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", TaQLNode(), (yyvsp[0].val)->getString());
           }
#line 3093 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 114:
#line 873 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no datamans */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3102 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 115:
#line 877 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3110 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 116:
#line 883 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3119 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 117:
#line 887 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3129 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 118:
#line 896 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no groupby */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3138 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 119:
#line 900 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGroupNodeRep (TaQLGroupNodeRep::Normal, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3148 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 120:
#line 905 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGroupNodeRep (TaQLGroupNodeRep::Rollup, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3158 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 121:
#line 913 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no having */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3167 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 122:
#line 917 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3175 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 123:
#line 927 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no sort */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3184 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 124:
#line 931 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3194 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 125:
#line 936 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3204 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 126:
#line 941 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (False, TaQLSortNodeRep::Descending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3214 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 127:
#line 946 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3224 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 128:
#line 951 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3234 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 129:
#line 956 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3244 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 130:
#line 961 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Ascending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3254 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 131:
#line 966 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLSortNodeRep (True, TaQLSortNodeRep::Descending, *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3264 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 132:
#line 978 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no limit,offset */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3273 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 133:
#line 982 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3283 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 134:
#line 987 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3293 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 135:
#line 992 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (0, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3303 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 136:
#line 997 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3313 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 137:
#line 1002 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLLimitOffNodeRep (*(yyvsp[0].node), *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3323 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 138:
#line 1010 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[0].nodename)->getString(), TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3333 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 139:
#line 1015 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ((yyvsp[-2].nodename)->getString(), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3343 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 140:
#line 1020 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep ("", *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3353 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 141:
#line 1028 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {  /* PLAIN_BIG, etc. for backward compatibility */
               TaQLNode val(new TaQLConstNodeRep (True));
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->setPPFix ("[", "]");
               (yyval.nodelist)->add (new TaQLRecFldNodeRep ((yyvsp[0].val)->getString(), val, ""));
	   }
#line 3365 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 142:
#line 1035 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
	   }
#line 3373 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 143:
#line 1041 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               setEXPRstate();
           }
#line 3381 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 144:
#line 1044 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no result */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3390 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 145:
#line 1048 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3398 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 146:
#line 1051 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLGivingNodeRep (*(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3408 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 147:
#line 1059 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3416 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 148:
#line 1065 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no columns given (thus take all) */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3425 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 149:
#line 1069 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3433 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 150:
#line 1075 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3443 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 151:
#line 1080 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3452 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 152:
#line 1092 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[0].node), "", "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3462 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 153:
#line 1097 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[-2].node), (yyvsp[0].val)->getString(), "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3472 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 154:
#line 1102 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[-6].node), (yyvsp[-3].val)->getString(),
                                        (yyvsp[-1].val)->getString(), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3483 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 155:
#line 1108 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* name and data type */
	       (yyval.node) = new TaQLNode(
	            new TaQLColNodeRep (*(yyvsp[-3].node), (yyvsp[-1].val)->getString(),
                                        "", (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3494 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 156:
#line 1114 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColNodeRep (*(yyvsp[-7].node), (yyvsp[-4].val)->getString(),
                                        (yyvsp[-2].val)->getString(), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3505 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 157:
#line 1120 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node)= (yyvsp[0].node);
           }
#line 3513 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 158:
#line 1129 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {          /* SELECT * FROM ... */
               TaQLRegexNode p (new TaQLRegexNodeRep ("~p/*/"));
               (yyval.node) = new TaQLNode (new TaQLColNodeRep (p, "", "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3523 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 159:
#line 1134 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode (new TaQLColNodeRep (*(yyvsp[0].valre), "", "", ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3532 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 160:
#line 1145 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
	   }
#line 3542 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 161:
#line 1150 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-3].val)->getString(),
                                               (yyvsp[-1].val)->getString()));
	   }
#line 3553 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 162:
#line 1156 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[0].val)->getString()));
	   }
#line 3562 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 163:
#line 1160 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-6].nodelist);
               (yyval.nodelist)->add (new TaQLKeyColNodeRep ((yyvsp[-3].val)->getString(),
                                               (yyvsp[-1].val)->getString()));
	   }
#line 3572 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 164:
#line 1168 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no nrows given */
               (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3581 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 165:
#line 1172 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 3589 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 166:
#line 1178 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no column specifications given */
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3598 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 167:
#line 1182 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3606 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 168:
#line 1188 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3616 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 169:
#line 1193 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 3625 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 170:
#line 1203 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-1].val)->getString(), String(), (yyvsp[0].val)->getString(),
		                           TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3636 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 171:
#line 1209 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {	
               TaQLMultiNode re(False);
	       re.add (*(yyvsp[0].node));
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-2].val)->getString(), String(), (yyvsp[-1].val)->getString(),
		                           re));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3649 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 172:
#line 1217 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-4].val)->getString(), String(), (yyvsp[-3].val)->getString(),
		                           *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3660 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 173:
#line 1223 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
		    new TaQLColSpecNodeRep((yyvsp[-2].val)->getString(), (yyvsp[0].nodename)->getString(),
		                           String(), TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3671 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 174:
#line 1229 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {	
               TaQLMultiNode re(False);
	       re.add (*(yyvsp[0].node));
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-3].val)->getString(), (yyvsp[-1].nodename)->getString(),
		                           String(), re));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3684 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 175:
#line 1237 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-5].val)->getString(), (yyvsp[-3].nodename)->getString(),
		                           String(), *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3695 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 176:
#line 1243 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
		    new TaQLColSpecNodeRep((yyvsp[-3].val)->getString(), (yyvsp[-1].nodename)->getString(),
		                           (yyvsp[0].val)->getString(), TaQLMultiNode()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3706 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 177:
#line 1249 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {	
               TaQLMultiNode re(False);
	       re.add (*(yyvsp[-1].val));
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-4].val)->getString(), (yyvsp[-2].nodename)->getString(),
		                           (yyvsp[-1].val)->getString(), re));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3719 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 178:
#line 1257 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLColSpecNodeRep((yyvsp[-6].val)->getString(), (yyvsp[-4].nodename)->getString(),
		                           (yyvsp[-3].val)->getString(), *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 3730 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 179:
#line 1266 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no LIKE table given */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3739 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 180:
#line 1270 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 3749 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 181:
#line 1275 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[-2].node));
               (yyval.nodelist)->add (*(yyvsp[0].nodelist));
           }
#line 3760 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 182:
#line 1283 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no LIKE table given */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3769 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 183:
#line 1287 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* A superfluous ADDCOLUMN is possible */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3778 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 184:
#line 1291 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[-1].node));
           }
#line 3788 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 185:
#line 1296 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[-3].node));
               (yyval.nodelist)->add (*(yyvsp[-1].nodelist));
           }
#line 3799 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 186:
#line 1305 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no FROM tables given */
               (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3808 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 187:
#line 1309 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3816 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 188:
#line 1315 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
               /* All table names are processed, thus expressions hereafter */
               setEXPRstate();
           }
#line 3826 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 189:
#line 1321 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
               /* Another table name can be expected */
               setTABLENAMEstate();
	   }
#line 3838 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 190:
#line 1328 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
               /* Another table name can be expected */
               setTABLENAMEstate();
	   }
#line 3849 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 191:
#line 1343 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {                          /* table name is also alias */
	       (yyvsp[0].val)->setIsTableName();
	       (yyval.node) = new TaQLNode(
                    new TaQLTableNodeRep(*(yyvsp[0].val), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3860 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 192:
#line 1349 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {                        /* no alias */
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[0].node), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3870 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 193:
#line 1354 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {                  /* table name and alias */
	       (yyvsp[0].val)->setIsTableName();
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[-1].node), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3881 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 194:
#line 1360 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[-2].node), (yyvsp[0].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3891 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 195:
#line 1365 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLTableNodeRep(*(yyvsp[0].node), (yyvsp[-2].val)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3901 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 196:
#line 1373 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 3909 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 197:
#line 1376 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.node) = (yyvsp[0].val);
           }
#line 3918 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 198:
#line 1389 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].nodeselect)->setFromExecute();
               (yyval.node) = (yyvsp[0].nodeselect);
           }
#line 3927 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 199:
#line 1393 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].nodename);
           }
#line 3935 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 200:
#line 1396 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLConcTabNodeRep((yyvsp[-1].nodename)->getString(), *(yyvsp[-3].nodelist), *(yyvsp[-2].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 3945 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 201:
#line 1404 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {    /* no SUBTABLES */
                (yyval.nodelist) = new TaQLMultiNode();
                TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 3954 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 202:
#line 1408 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
                (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 3962 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 203:
#line 1414 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodelist)->add (*(yyvsp[0].val));
	   }
#line 3973 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 204:
#line 1420 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodelist)->add (*(yyvsp[0].val));
	   }
#line 3983 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 205:
#line 1428 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               setTABLENAMEstate();
           }
#line 3991 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 206:
#line 1431 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               setTABLENAMEstate();
           }
#line 3999 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 207:
#line 1434 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no GIVING */
               (yyval.nodename) = new TaQLConstNode(new TaQLConstNodeRep(String()));
               TaQLNode::theirNodesCreated.push_back ((yyval.nodename));
           }
#line 4008 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 208:
#line 1438 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodename) = (yyvsp[0].nodename);
           }
#line 4016 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 209:
#line 1444 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4025 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 210:
#line 1448 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4034 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 211:
#line 1452 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4043 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 212:
#line 1459 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].val)->setIsTableName();
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4052 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 213:
#line 1463 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodename) = (yyvsp[0].nodename);
           }
#line 4060 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 214:
#line 1469 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no joins */
	       (yyval.nodelist) = new TaQLMultiNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 4069 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 215:
#line 1473 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
           }
#line 4077 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 216:
#line 1478 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 4086 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 217:
#line 1482 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
               (yyval.nodelist)->setSeparator (String());
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 4097 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 218:
#line 1490 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode (new TaQLJoinNodeRep (*(yyvsp[-2].nodelist), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4106 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 219:
#line 1497 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no selection */
	       (yyval.node) = new TaQLNode();
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4115 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 220:
#line 1501 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
	   }
#line 4123 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 221:
#line 1507 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
           }
#line 4131 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 222:
#line 1510 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_OR, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4141 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 223:
#line 1518 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
           }
#line 4149 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 224:
#line 1521 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_AND, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4159 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 225:
#line 1529 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
           }
#line 4167 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 226:
#line 1532 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4177 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 227:
#line 1537 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4187 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 228:
#line 1542 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GT, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4197 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 229:
#line 1547 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_GE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4207 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 230:
#line 1552 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LT, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4217 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 231:
#line 1557 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_LE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4227 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 232:
#line 1562 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4237 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 233:
#line 1567 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {     /* ~= means function NEAR */
   	       TaQLMultiNode set(False);
               set.add (*(yyvsp[-2].node));
               set.add (*(yyvsp[0].node));
               set.add (TaQLConstNode(new TaQLConstNodeRep(1e-5)));
               (yyval.node) = new TaQLNode (new TaQLFuncNodeRep("NEAR", set));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4250 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 234:
#line 1575 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {     /* !~= means NOT function NEAR */
   	       TaQLMultiNode set(False);
               set.add (*(yyvsp[-2].node));
               set.add (*(yyvsp[0].node));
               set.add (TaQLConstNode(new TaQLConstNodeRep(1e-5)));
               TaQLNode ref (new TaQLFuncNodeRep("NEAR", set));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4265 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 235:
#line 1585 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {     /* REGEX also contains operator ~ or !~ */
	       (yyval.node) = new TaQLNode(TaQLBinaryNodeRep::handleRegex (*(yyvsp[-1].node), *(yyvsp[0].valre)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4274 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 236:
#line 1589 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[0].node));
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, *(yyvsp[-2].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4287 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 237:
#line 1597 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {     /* case-insensitive LIKE */
   	       TaQLMultiNode mn1(False);
               mn1.add (*(yyvsp[-2].node));
               TaQLNode tn1 (new TaQLFuncNodeRep("LOWER", mn1));
   	       TaQLMultiNode mn2(False);
               mn2.add (*(yyvsp[0].node));
               TaQLNode tn2 (new TaQLFuncNodeRep("LOWER", mn2));
   	       TaQLMultiNode re(False);
               re.add (tn2);
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_EQ, tn1, ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4306 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 238:
#line 1611 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode re(False);
               re.add (*(yyvsp[0].node));
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, *(yyvsp[-3].node), ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4319 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 239:
#line 1619 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
   	       TaQLMultiNode mn1(False);
               mn1.add (*(yyvsp[-3].node));
               TaQLNode tn1 (new TaQLFuncNodeRep("LOWER", mn1));
   	       TaQLMultiNode mn2(False);
               mn2.add (*(yyvsp[0].node));
               TaQLNode tn2 (new TaQLFuncNodeRep("LOWER", mn2));
   	       TaQLMultiNode re(False);
               re.add (tn2);
               TaQLNode ref (new TaQLFuncNodeRep("SQLPATTERN", re));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_NE, tn1, ref));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4338 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 240:
#line 1633 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {     /* is subquery result non-empty */
	       (yyvsp[0].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_EXISTS, *(yyvsp[0].nodeselect)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	    }
#line 4349 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 241:
#line 1639 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyvsp[0].nodeselect)->setNoExecute();
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOTEXISTS, *(yyvsp[0].nodeselect)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
            }
#line 4360 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 242:
#line 1645 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4370 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 243:
#line 1650 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLNode p(
                    new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-3].node), *(yyvsp[0].node)));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4382 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 244:
#line 1657 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-2].node), *(yyvsp[0].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4392 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 245:
#line 1662 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-3].node), *(yyvsp[0].nodelist)));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4403 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 246:
#line 1668 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-4].node), pr));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4415 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 247:
#line 1675 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-5].node), pr));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4428 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 248:
#line 1683 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node)));
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-4].node), pr));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4440 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 249:
#line 1690 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (new TaQLRangeNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode p (new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_IN, *(yyvsp[-5].node), pr));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4453 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 250:
#line 1698 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (*(yyvsp[-2].node));
	       pr.add (*(yyvsp[0].node));
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ("anyCone", pr));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4466 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 251:
#line 1706 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       TaQLMultiNode pr(False);
	       pr.add (*(yyvsp[-3].node));
	       pr.add (*(yyvsp[0].node));
               TaQLNode p (new TaQLFuncNodeRep ("anyCone", pr));
	       (yyval.node) = new TaQLNode(
                    new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, p));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4480 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 252:
#line 1718 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node)= (yyvsp[0].node);
           }
#line 4488 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 253:
#line 1721 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_PLUS, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4498 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 254:
#line 1726 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MINUS, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4508 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 255:
#line 1731 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_TIMES, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4518 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 256:
#line 1736 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_DIVIDE, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4528 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 257:
#line 1741 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_DIVIDETRUNC, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4538 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 258:
#line 1746 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_MODULO, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4548 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 259:
#line 1751 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_BITAND, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4558 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 260:
#line 1756 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_BITXOR, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4568 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 261:
#line 1761 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_BITOR, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4578 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 262:
#line 1766 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_MINUS, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4588 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 263:
#line 1772 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 4594 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 264:
#line 1773 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_BITNOT, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4604 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 265:
#line 1778 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLUnaryNodeRep (TaQLUnaryNodeRep::U_NOT, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4614 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 266:
#line 1783 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_POWER, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4624 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 267:
#line 1795 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 4630 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 268:
#line 1796 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLUnitNodeRep ((yyvsp[0].nodename)->getString(), *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4640 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 269:
#line 1807 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4648 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 270:
#line 1810 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
	            new TaQLBinaryNodeRep (TaQLBinaryNodeRep::B_INDEX, *(yyvsp[-3].node), *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4658 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 271:
#line 1822 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 4664 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 272:
#line 1823 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {     /* function */
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ((yyvsp[-3].nodename)->getString(), *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4674 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 273:
#line 1828 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {     /* COUNT function */
	       (yyval.node) = new TaQLNode(
                    new TaQLFuncNodeRep ("COUNT", *(yyvsp[-1].nodelist)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4684 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 274:
#line 1833 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(     /* COUNT(*) function */
                    new TaQLFuncNodeRep ("COUNTALL"));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4694 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 275:
#line 1838 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(     /* column name */
                    new TaQLKeyColNodeRep ((yyvsp[0].nodename)->getString()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 4704 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 276:
#line 1843 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].val);
	   }
#line 4712 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 277:
#line 1846 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = (yyvsp[0].node);
	   }
#line 4720 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 278:
#line 1852 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {            /* simple name */
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4728 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 279:
#line 1855 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {         /* name with . or :: */
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4736 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 280:
#line 1861 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodename) = (yyvsp[0].nodename);
           }
#line 4744 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 281:
#line 1864 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* compound unit (with special characters) */
               (yyval.nodename) = (yyvsp[0].val);
           }
#line 4752 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 282:
#line 1870 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.val) = (yyvsp[0].val);
	   }
#line 4760 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 283:
#line 1873 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.val) = (yyvsp[0].val);
	   }
#line 4768 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 284:
#line 1880 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyvsp[-1].nodelist)->setIsSetOrArray();
               (yyval.node) = (yyvsp[-1].nodelist);
           }
#line 4777 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 285:
#line 1884 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyvsp[-1].nodelist)->setIsSetOrArray();
               (yyval.node) = (yyvsp[-1].nodelist);
           }
#line 4786 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 286:
#line 1888 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].nodeselect);
           }
#line 4794 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 287:
#line 1894 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[0].nodelist);
	       (yyval.nodelist)->setPPFix("", "");
           }
#line 4803 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 288:
#line 1898 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);       /* no elements */
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
           }
#line 4812 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 289:
#line 1905 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4821 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 290:
#line 1909 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 4832 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 291:
#line 1918 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 4840 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 292:
#line 1921 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4848 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 293:
#line 1927 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(True);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->add (*(yyvsp[0].node));
           }
#line 4858 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 294:
#line 1940 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 4866 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 295:
#line 1943 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node), *(yyvsp[0].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4876 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 296:
#line 1948 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4886 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 297:
#line 1953 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-3].node), *(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4896 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 298:
#line 1958 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-3].node), *(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4906 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 299:
#line 1963 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-3].node), *(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4916 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 300:
#line 1968 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-3].node), *(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4926 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 301:
#line 1973 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
          }
#line 4936 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 302:
#line 1978 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
          }
#line 4946 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 303:
#line 1983 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4956 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 304:
#line 1988 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-1].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4966 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 305:
#line 1993 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4976 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 306:
#line 1998 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4986 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 307:
#line 2003 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 4996 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 308:
#line 2008 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5006 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 309:
#line 2013 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5016 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 310:
#line 2018 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node), *(yyvsp[0].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5026 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 311:
#line 2023 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5036 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 312:
#line 2028 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5046 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 313:
#line 2033 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-2].node), *(yyvsp[0].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5056 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 314:
#line 2038 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[0].node), False));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5066 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 315:
#line 2043 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (*(yyvsp[0].node), True));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5076 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 316:
#line 2048 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (False, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5086 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 317:
#line 2053 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRangeNodeRep (True, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5096 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 318:
#line 2064 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5105 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 319:
#line 2068 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-1].nodelist);
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	   }
#line 5114 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 320:
#line 2072 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	   }
#line 5126 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 321:
#line 2079 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (new TaQLIndexNodeRep(0, 0, 0));
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5138 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 322:
#line 2086 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
	       (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5149 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 323:
#line 2096 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[0].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5159 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 324:
#line 2101 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 5167 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 325:
#line 2107 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[0].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5177 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 326:
#line 2112 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
	   }
#line 5185 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 327:
#line 2121 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 5193 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 328:
#line 2124 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-1].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5203 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 329:
#line 2129 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-2].node), 0, 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5213 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 330:
#line 2134 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-3].node), 0, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5223 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 331:
#line 2143 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 5231 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 332:
#line 2146 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode (new TaQLIndexNodeRep
                    (*(yyvsp[-1].node), TaQLConstNode(new TaQLConstNodeRep(Int64(Slicer::MimicSource))), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5241 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 333:
#line 2151 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode (new TaQLIndexNodeRep
                    (*(yyvsp[-2].node), TaQLConstNode(new TaQLConstNodeRep(Int64(Slicer::MimicSource))), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5251 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 334:
#line 2156 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode (new TaQLIndexNodeRep
                    (*(yyvsp[-3].node), TaQLConstNode(new TaQLConstNodeRep(Int64(Slicer::MimicSource))), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5261 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 335:
#line 2165 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-2].node), *(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5271 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 336:
#line 2170 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-3].node), *(yyvsp[-1].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5281 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 337:
#line 2175 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (*(yyvsp[-4].node), *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5291 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 338:
#line 2180 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[0].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5301 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 339:
#line 2185 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[-1].node), 0));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5311 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 340:
#line 2190 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, *(yyvsp[-2].node), *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5321 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 341:
#line 2195 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLIndexNodeRep (0, 0, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5331 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 342:
#line 2203 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5340 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 343:
#line 2207 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5350 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 344:
#line 2215 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::None, *(yyvsp[0].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5360 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 345:
#line 2220 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Ascending, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5370 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 346:
#line 2225 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLSortKeyNodeRep (TaQLSortKeyNodeRep::Descending, *(yyvsp[-1].node)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
           }
#line 5380 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 347:
#line 2233 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5390 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 348:
#line 2238 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = (yyvsp[-2].nodelist);
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5399 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 349:
#line 2245 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ("", *(yyvsp[-1].nodelist), ""));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
	   }
#line 5409 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 350:
#line 2253 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5417 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 351:
#line 2256 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.nodelist) = new TaQLMultiNode(False);
	       TaQLNode::theirNodesCreated.push_back ((yyval.nodelist));
	       (yyval.nodelist)->setPPFix ("[", "]");
               (yyval.nodelist)->add (*(yyvsp[0].node));
	   }
#line 5428 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 352:
#line 2265 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 5436 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 353:
#line 2268 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = (yyvsp[0].node);
           }
#line 5444 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 354:
#line 2274 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[-2].val)->getString(), *(yyvsp[0].noderecfldrep)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
               delete (yyvsp[0].noderecfldrep);
           }
#line 5455 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 355:
#line 2283 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.noderecfldrep) = new TaQLRecFldNodeRep ("", *(yyvsp[-1].node), (yyvsp[0].val)->getString());
           }
#line 5463 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 356:
#line 2288 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
	       (yyval.node) = new TaQLNode(
                    new TaQLRecFldNodeRep ((yyvsp[-2].val)->getString(), *(yyvsp[0].noderecfldrep)));
	       TaQLNode::theirNodesCreated.push_back ((yyval.node));
               delete (yyvsp[0].noderecfldrep);
           }
#line 5474 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 357:
#line 2297 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {   /* no datatype */
               (yyval.val) = new TaQLConstNode(new TaQLConstNodeRep(String()));
	       TaQLNode::theirNodesCreated.push_back ((yyval.val));
           }
#line 5483 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;

  case 358:
#line 2301 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1646  */
    {
               (yyval.val) = (yyvsp[0].val);
           }
#line 5491 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
    break;


#line 5495 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/BUILD/tables/TableGram.ycc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 2306 "/home/zuul06-2/dschieb/casa/dedicated-table-sys/casacore/tables/TaQL/TableGram.yy" /* yacc.c:1906  */

